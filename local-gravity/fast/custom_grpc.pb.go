// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fast

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CustomRuleManagerServiceClient is the client API for CustomRuleManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomRuleManagerServiceClient interface {
	// 自定义规则增、删、查
	AddRules(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	DeleteRules(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	QueryRules(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// 规则开关控制
	RuleSwitch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchResponse, error)
}

type customRuleManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomRuleManagerServiceClient(cc grpc.ClientConnInterface) CustomRuleManagerServiceClient {
	return &customRuleManagerServiceClient{cc}
}

func (c *customRuleManagerServiceClient) AddRules(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/galaxy.voyager.app.fast.CustomRuleManagerService/AddRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customRuleManagerServiceClient) DeleteRules(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/galaxy.voyager.app.fast.CustomRuleManagerService/DeleteRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customRuleManagerServiceClient) QueryRules(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/galaxy.voyager.app.fast.CustomRuleManagerService/QueryRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customRuleManagerServiceClient) RuleSwitch(ctx context.Context, in *SwitchRequest, opts ...grpc.CallOption) (*SwitchResponse, error) {
	out := new(SwitchResponse)
	err := c.cc.Invoke(ctx, "/galaxy.voyager.app.fast.CustomRuleManagerService/RuleSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomRuleManagerServiceServer is the server API for CustomRuleManagerService service.
// All implementations must embed UnimplementedCustomRuleManagerServiceServer
// for forward compatibility
type CustomRuleManagerServiceServer interface {
	// 自定义规则增、删、查
	AddRules(context.Context, *RuleRequest) (*RuleResponse, error)
	DeleteRules(context.Context, *RuleRequest) (*RuleResponse, error)
	QueryRules(context.Context, *QueryRequest) (*QueryResponse, error)
	// 规则开关控制
	RuleSwitch(context.Context, *SwitchRequest) (*SwitchResponse, error)
	mustEmbedUnimplementedCustomRuleManagerServiceServer()
}

// UnimplementedCustomRuleManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomRuleManagerServiceServer struct {
}

func (UnimplementedCustomRuleManagerServiceServer) AddRules(context.Context, *RuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRules not implemented")
}
func (UnimplementedCustomRuleManagerServiceServer) DeleteRules(context.Context, *RuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRules not implemented")
}
func (UnimplementedCustomRuleManagerServiceServer) QueryRules(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRules not implemented")
}
func (UnimplementedCustomRuleManagerServiceServer) RuleSwitch(context.Context, *SwitchRequest) (*SwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleSwitch not implemented")
}
func (UnimplementedCustomRuleManagerServiceServer) mustEmbedUnimplementedCustomRuleManagerServiceServer() {
}

// UnsafeCustomRuleManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomRuleManagerServiceServer will
// result in compilation errors.
type UnsafeCustomRuleManagerServiceServer interface {
	mustEmbedUnimplementedCustomRuleManagerServiceServer()
}

func RegisterCustomRuleManagerServiceServer(s grpc.ServiceRegistrar, srv CustomRuleManagerServiceServer) {
	s.RegisterService(&_CustomRuleManagerService_serviceDesc, srv)
}

func _CustomRuleManagerService_AddRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomRuleManagerServiceServer).AddRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.voyager.app.fast.CustomRuleManagerService/AddRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomRuleManagerServiceServer).AddRules(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRuleManagerService_DeleteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomRuleManagerServiceServer).DeleteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.voyager.app.fast.CustomRuleManagerService/DeleteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomRuleManagerServiceServer).DeleteRules(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRuleManagerService_QueryRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomRuleManagerServiceServer).QueryRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.voyager.app.fast.CustomRuleManagerService/QueryRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomRuleManagerServiceServer).QueryRules(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomRuleManagerService_RuleSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomRuleManagerServiceServer).RuleSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/galaxy.voyager.app.fast.CustomRuleManagerService/RuleSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomRuleManagerServiceServer).RuleSwitch(ctx, req.(*SwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomRuleManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "galaxy.voyager.app.fast.CustomRuleManagerService",
	HandlerType: (*CustomRuleManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRules",
			Handler:    _CustomRuleManagerService_AddRules_Handler,
		},
		{
			MethodName: "DeleteRules",
			Handler:    _CustomRuleManagerService_DeleteRules_Handler,
		},
		{
			MethodName: "QueryRules",
			Handler:    _CustomRuleManagerService_QueryRules_Handler,
		},
		{
			MethodName: "RuleSwitch",
			Handler:    _CustomRuleManagerService_RuleSwitch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "custom.proto",
}
