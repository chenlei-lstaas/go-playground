package main

import (
	"fmt"
	"io"
	"net"
	"time"
)

var slice1024 = []byte("90123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234")

func server() {
	laddr, _ := net.ResolveUDPAddr("udp", "0.0.0.0:9090")
	conn, err := net.ListenUDP("udp", laddr)
	if err != nil {
		fmt.Println(err)
	}
	for {
		buffer := make([]byte, 4096)
		_, raddr, err := conn.ReadFromUDP(buffer)
		if err != nil {
			break
		}
		fmt.Println(raddr.String())
	}
}

func client() {
	laddr, _ := net.ResolveUDPAddr("udp", "0.0.0.0:9091")
	raddr, _ := net.ResolveUDPAddr("udp", "0.0.0.0:9090")
	conn, err := net.DialUDP("udp", laddr, raddr)
	if err != nil {
		fmt.Println(err)
	}

	buffer := make([]byte, 0)
	buffer = append(buffer, slice1024...)
	now := time.Now()
	for i := 0; i < 100000; i++ {
		_, err := io.CopyBuffer(conn, conn, buffer[:])
		if err != nil {
			fmt.Println(err)
			break
		}
	}
	end := time.Now()
	fmt.Println(now, end, end.UnixNano()-now.UnixNano())
}

func main() {
	go server()
	go client()

	select {}
}
